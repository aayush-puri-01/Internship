FROM ghcr.io/astral-sh/uv:python3.12-bookworm-slim

# Install the project into `/app`
WORKDIR /app

# Enable bytecode compilation
ENV UV_COMPILE_BYTECODE=1

# Copy from the cache instead of linking since it's a mounted volume
ENV UV_LINK_MODE=copy

RUN apt-get update && apt-get install -y netcat-openbsd

# Install the project's dependencies using the lockfile and settings
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --frozen --no-install-project --no-dev

# Then, add the rest of the project source code and install it
# Installing separately from its dependencies allows optimal layer caching
ADD . /app
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-dev

COPY scripts/waitforservice.sh /app/wait-for-fastapi.sh
RUN chmod +x /app/wait-for-fastapi.sh

# Place executables in the environment at the front of the path
ENV PATH="/app/.venv/bin:$PATH"


EXPOSE 7860

# Reset the entrypoint, don't invoke `uv`
ENTRYPOINT []

# Run the FastAPI application by default
# Uses `fastapi dev` to enable hot-reloading when the `watch` sync occurs
# Uses `--host 0.0.0.0` to allow access from outside the container
CMD ["sh", "/app/wait-for-fastapi.sh", "python", "app.py"]
#this works because the shell scripts executes as the first process but the last two arguments are passed to the script via "$@", final command in the script is exec "$@" which replaces the shell with the final process i.e. python app.py 

#this is a very common pattern for entrypoint wrappers, i.e. write a script running a waiting function and then execute the major application then onwards 
